{"version":3,"sources":["webpack:///src/view/moduleCSS/BaseCSS.vue","webpack:///./src/view/moduleCSS/BaseCSS.vue?72e9","webpack:///./src/view/moduleCSS/BaseCSS.vue"],"names":["moduleCSS_BaseCSS","render","_vm","this","_h","$createElement","_c","_self","staticStyle","width","_v","class","oldModule","oldType","newModule","newType","style","animationPlayState","animatedStation","on","click","$event","animated","_m","staticRenderFns","staticClass","Component","__webpack_require__","normalizeComponent","name","data","showModule","methods","ssrContext","__webpack_exports__"],"mappings":"sGA0CA,ICvCeA,GADEC,OAFjB,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,aAAaC,MAAA,UAAgBH,EAAA,OAAAJ,EAAAQ,GAAA,sDAAAR,EAAAQ,GAAA,KAAAJ,EAAA,OAA+FK,OAAOC,UAAAV,EAAAW,QAAAC,UAAAZ,EAAAa,SAA4CC,OAASC,mBAAAf,EAAAgB,iBAAuCC,IAAMC,MAAA,SAAAC,GAAyB,OAAAnB,EAAAoB,eAAwBpB,EAAAQ,GAAA,kBAAAR,EAAAQ,GAAA,KAAAJ,EAAA,OAAAJ,EAAAQ,GAAA,gFAAAR,EAAAQ,GAAA,KAAAR,EAAAqB,GAAA,MAE/WC,iBADjB,WAAoC,IAAapB,EAAbD,KAAaE,eAA0BC,EAAvCH,KAAuCI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBmB,YAAA,cAAwBnB,EAAA,OAAYmB,YAAA,YAApHtB,KAA0IO,GAAA,WAA1IP,KAA0IO,GAAA,KAAAJ,EAAA,OAA0CmB,YAAA,gBAApLtB,KAA8MO,GAAA,eCElP,IAcAgB,EAdyBC,EAAQ,OAcjCC,EF0BAC,KAAA,UACAC,KAFA,WAGA,OACAjB,SAAA,EACAE,SAAA,EACAgB,YAAA,EACAb,gBAAA,WAGAc,SACAV,SAAA,WACAnB,KAAAY,SAAAZ,KAAAY,QACA,WAAAZ,KAAAe,gBACAf,KAAAe,gBAAA,UAEAf,KAAAe,gBAAA,YEvCElB,GATF,EAVA,SAAAiC,GACEN,EAAQ,SAaV,KAEA,MAUeO,EAAA,QAAAR,EAAiB","file":"static/js/10.bfda74eaca9afa108037.js","sourcesContent":["<template>\r\n    <div style=\"width:100%\">\r\n        <div>1.过渡动画 transition 动画效果 animation 规定动画的名称 规定动画的时长</div>\r\n        <!-- transition-property\t过渡属性的名称all/none/property ;transition-duration\t过渡时间;transition-timing-function\r\n        过渡曲线 linear|ease|ease-in|ease-out|ease-in-out| cubic-bezier(n,n,n,n) n0~1之间;transition-delay\t过渡开始时间-->\r\n        <div\r\n                :class=\"{oldModule:oldType,newModule:newType}\"\r\n                @click=\"animated()\"\r\n                :style=\"{animationPlayState:animatedStation}\"\r\n        >测试条件变化\r\n        </div>\r\n        <!-- animation\t所有动画属性的简写属性，除了 animation-play-state 属性。\r\n        animation-name\t规定 @keyframes 动画的名称。\r\n        animation-duration\t规定动画完成一个周期所花费的秒或毫秒。默认是 0。\r\n        animation-timing-function\t规定动画的速度曲线。默认是 \"ease\"。\r\n        animation-fill-mode\t规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式,none|forwards|backwards|both|initial|inherit。\r\n        animation-delay\t规定动画何时开始。默认是 0。\r\n        animation-iteration-count\t规定动画被播放的次数。默认是 1。 infinite 无限次数\r\n        animation-direction\t normal/ reverse/alternate\t动画奇数次正向播放,偶数次反向/alternate-reverse\r\n        animation-play-state\t规定动画是否正在运行或暂停。paused|running-->\r\n        <div>\r\n            2.响应式布局 viewport 翻译为中文可以叫做\"视区\" 3.web_媒体查询 4.背景样式 边框样式 flex\r\n        </div>\r\n\r\n\r\n        <!--        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">-->\r\n        <!--        width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。-->\r\n        <!--        height：和 width 相对应，指定高度。-->\r\n        <!--        initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。-->\r\n        <!--        maximum-scale：允许用户缩放到的最大比例。-->\r\n        <!--        minimum-scale：允许用户缩放到的最小比例。-->\r\n        <!--        user-scalable：用户是否可以手动缩放。-->\r\n        <div class=\"flexStyle\">\r\n            <div class=\"bgStyle\"> 背景样式</div>\r\n            <div class=\"borderStyle\">边框样式</div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"BaseCSS\",\r\n        data() {\r\n            return {\r\n                oldType: true,\r\n                newType: false,\r\n                showModule: true,\r\n                animatedStation: \"paused\"\r\n            };\r\n        },\r\n        methods: {\r\n            animated: function () {\r\n                this.newType = !this.newType;\r\n                if (this.animatedStation === \"paused\") {\r\n                    this.animatedStation = \"running\";\r\n                } else {\r\n                    this.animatedStation = \"paused\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n    //动画\r\n    .oldModule {\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: #ceffff;\r\n        transition: all 2s;\r\n        /*animation: beBigger 10s linear backwards 0s infinite alternate;*/\r\n        animation-name: beBigger;\r\n        animation-duration: 4s; //规定动画完成一个周期所花费的秒或毫秒。默认是 0。\r\n        animation-timing-function: linear; //\t规定动画的速度曲线。默认是 \"ease\"。\r\n        animation-fill-mode: forwards; //规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式,none|forwards|backwards|both|initial|inherit。\r\n        animation-delay: 0s; //规定动画何时开始。默认是 0。\r\n        animation-iteration-count: infinite; //规定动画被播放的次数。默认是 1。 infinite 无限次数\r\n        animation-direction: alternate-reverse; //normal/ reverse/alternate动画奇数次正向播放,偶数次反向/alternate-reverse\r\n        animation-play-state: paused; //\t规定动画是否正在运行或暂停。paused|running-->\r\n        // transition: background-color 2s;\r\n    }\r\n\r\n    .newModule {\r\n        width: 200px;\r\n        // height: 200px;\r\n        background-color: red;\r\n    }\r\n\r\n    @keyframes beBigger {\r\n        0% {\r\n            background: red;\r\n            width: 0px;\r\n        }\r\n        25% {\r\n            background: yellow;\r\n            width: 400px;\r\n        }\r\n        50% {\r\n            background: blue;\r\n            width: 800px;\r\n        }\r\n        100% {\r\n            background: green;\r\n            width: 1200px;\r\n        }\r\n    }\r\n\r\n    .animatedModule {\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: blue;\r\n    }\r\n\r\n    /*媒体查询*/\r\n    @media only screen and (max-width: 768px) { //括号内部插入条件\r\n        .oldModule {\r\n            background-color: pink;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-height: 400px) { //括号内部插入条件\r\n        .oldModule {\r\n            color: red;\r\n            font-size: 25px;\r\n        }\r\n    }\r\n\r\n    /*orientation：portrait竖屏 | landscape横屏 */\r\n    @media only screen and (orientation: portrait) { //括号内部插入条件 竖屏\r\n        .oldModule {\r\n            color: black;\r\n            width: 300px;\r\n        }\r\n    }\r\n\r\n    .bgStyle {\r\n        width: 200px;\r\n        margin-right: 10px;\r\n        padding: 0 10px;\r\n        height: 200px;\r\n        background-image: url(\"../../../static/img/forest.jpg\"), linear-gradient(to right, green 0%, white 100%); //背景图片渐变\r\n        background-blend-mode: overlay; //normal|multiply|screen|overlay|darken|lighten|color-dodge|saturation|color|luminosity;背景图片颜色混合模式\r\n        background-size: 50% 50%; //尺寸\r\n        background-repeat: no-repeat;\r\n        background-position: 10px center;\r\n        background-color: #8cc5ff;\r\n        background-clip: padding-box; //背景区域border-box|padding-box|content-box;\r\n        background-origin: content-box; //内容框相对定位的背景图片padding-box|border-box|content-box;\r\n        flex-grow: 1;\r\n        flex-shrink: 1;\r\n        flex-basis: 100px; //只是指向内容的尺寸.不包括边框\r\n        order: -1;\r\n\r\n    }\r\n\r\n    .borderStyle {\r\n        width: 160px;\r\n        padding: 0 10px;\r\n        height: 160px;\r\n        margin-right: 10px;\r\n        background-color: #8cc5ff;\r\n        border-style: solid;\r\n        border-width: 20px;\r\n        border-color: pink;\r\n        /*border-bottom-style:dotted;*/\r\n        /*边框图片*/\r\n        border-image-source: url(\"../../../static/img/border.png\");\r\n        border-image-repeat: round;\r\n        /*border-image-width: 20px 20px;*/\r\n        border-image-slice: 30 30 30 30; //指定图像的边界向内偏移：\r\n        flex-grow: 0;\r\n        flex-shrink: 0;\r\n        flex-basis: 100px;\r\n        order: 0;\r\n\r\n    }\r\n\r\n    .flexStyle {\r\n        display: flex;\r\n        /*flex-basis:auto; //属性用于设置或检索弹性盒伸缩基准值*/\r\n        /*flex-direction: row-reverse; //排列方向row|row-reverse|column|column-reverse|initial|inherit*/\r\n        /*flex-wrap: wrap-reverse; //是否换行*/\r\n        justify-content: center;//横向对其方式\r\n        align-items: center;//纵向对其方式\r\n        /*    flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap*/\r\n        /*order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。*/\r\n        /*.item {  order:1; }*/\r\n    }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/view/moduleCSS/BaseCSS.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"width\":\"100%\"}},[_c('div',[_vm._v(\"1.过渡动画 transition 动画效果 animation 规定动画的名称 规定动画的时长\")]),_vm._v(\" \"),_c('div',{class:{oldModule:_vm.oldType,newModule:_vm.newType},style:({animationPlayState:_vm.animatedStation}),on:{\"click\":function($event){return _vm.animated()}}},[_vm._v(\"测试条件变化\\n    \")]),_vm._v(\" \"),_c('div',[_vm._v(\"\\n        2.响应式布局 viewport 翻译为中文可以叫做\\\"视区\\\" 3.web_媒体查询 4.背景样式 边框样式 flex\\n    \")]),_vm._v(\" \"),_vm._m(0)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"flexStyle\"},[_c('div',{staticClass:\"bgStyle\"},[_vm._v(\" 背景样式\")]),_vm._v(\" \"),_c('div',{staticClass:\"borderStyle\"},[_vm._v(\"边框样式\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-45d5f3b5\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/view/moduleCSS/BaseCSS.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-45d5f3b5\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./BaseCSS.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./BaseCSS.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./BaseCSS.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-45d5f3b5\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./BaseCSS.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/moduleCSS/BaseCSS.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}